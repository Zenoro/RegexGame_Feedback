{
	"m_DescList":[
		"We assign special meanings to certain symbols, such as:  ",
		"<color=#FF68DD>*</color>     Match the preceding regex zero or more times  ",
		"<color=#FF68DD>?</color>    Match the preceding element zero or one time  ",
		"<color=#3173FF>[]</color>    Specify a character set  ",
		"",
		"However, this introduces new issues.  ",
		"How should I write a regex to match the blue portion of the string \"interesting, <color=#3c3cff>[?*]</color> 123\"?  ",
		"",
		"Typically, use the backslash \"\" to force the following character to retain its literal meaning.  ",
		"<color=#666666>Located above the Enter key on qwerty keyboards</color>  ",
		"",
		"For example, <color=#AB2800>\\[\\?\\*\\]</color> matches:  ",
		"interesting, <color=#3c3cff>[?*] 123</color>  ",
		"",
		"<b>Commonly Escaped Symbols</b>  ",
		"[ ] ( ) { } . * + ? ^ $ | \\ \" '  ",
		"These symbols require escaping with \\  ",
		"Example: Using <color=#AB2800>\\\\</color> to match <color=#3c3cff>C:\\Windows\\xxx</color> yields:  ",
		"C:<color=#3c3cff>\\</color>Windows\\xxx  ",
		"C:\\Windows<color=#3c3cff>\\</color>xxx  ",
		"",
		"<b>Predefined Character Classes/Control Characters</b>  ",
		"\\t Matches tab character \\u0009  ",
		"\\n Matches newline character \\u000A  ",
		"\\r Matches carriage return \\u000D  ",
		"",
		"<b>Hexadecimal Escape Notation</b>  ",
		"\\unnnn E.g., \\u0009 represents the Unicode character at codepoint 9  ",
		"\\unnnn can forcibly encode invisible characters, emojis, or mathematical symbols  ",
		"",
		"<b>Verbatim Strings</b>  ",
		"In C#, the following string declarations are equivalent:  ",
		"<color=#3c3cff>string</color> str = <color=#a64444>\"! \" \\' ?\"</color>;  ",
		"<color=#3c3cff>string</color> str = <color=#a64444>@\"! \"\" ' ?\"</color>;  ",
		"The @ prefix denotes a verbatim string. In verbatim strings, \"\" is treated as \", differing from standard string escaping.  ",
		"To maintain consistency, the game uses <b>standard string escaping</b> rather than verbatim strings.  ",
		"",
		"Now, we aim to detect any two adjacent characters where:  ",
		"- The first character is one of: [ ] ( ) { } . * + ? ^ $ | \\ \" '  ",
		"- The second character is NOT a special character from the above set  ",
		"",
		"To reduce difficulty, the following rules apply to 100% of input data:  ",
		"1. All symbols are English half-width characters  ",
		"2. Each test case may contain multiple valid matches  ",
		"",
		"",
		"Please construct a regular expression that passes all tests on the right."
	],
	"m_SystemLanguage":"English"
}