{
	"m_DescList":[
		"特定の記号に特別な意味を持たせています：",
		"<color=#FF68DD>*</color>     直前の正規表現に0回以上一致  ",
		"<color=#FF68DD>?</color>    直前の要素に0回または1回一致  ",
		"<color=#3173FF>[]</color>    文字の集合を指定  ",
		"",
		"しかし、これにより新たな問題が発生します。  ",
		"文字列 \"interesting, <color=#3c3cff>[?*]</color> 123\" の青色部分に一致させるには、正規表現をどう記述すべきでしょうか？",
		"",
		"多くの場合、バックスラッシュ\"\"を使用し、次の文字をリテラルとして扱わせます。  ",
		"<color=#666666>qwertyキーボードのEnterキー上</color>",
		"",
		"例：<color=#AB2800>\\[\\?\\*\\]</color> の一致結果  ",
		"<color=#666666>interesting,</color> <color=#3c3cff>[?*]</color> <color=#666666>123</color>",
		"",
		"<b>よく使われるエスケープ記号</b>  ",
		"[ ] ( ) { } . * + ? ^ $ | \\ \" '  ",
		"これらの記号は \\ でエスケープします  ",
		"例：<color=#AB2800>\\\\</color> で <color=#3c3cff>C:\\Windows\\xxx</color> に一致 →  ",
		"C:<color=#3c3cff>\\</color>Windows\\xxx  ",
		"C:\\Windows<color=#3c3cff>\\</color>xxx",
		"",
		"<b>定義済み文字クラス／制御文字</b>  ",
		"\\t タブ文字 \\u0009 に一致  ",
		"\\n 改行文字 \\u000A に一致  ",
		"\\r キャリッジリターン \\u000D に一致",
		"",
		"<b>進数表現によるエスケープ</b>  ",
		"\\unnnn 例：\\u0009 はUnicodeコードポイント9の文字  ",
		"\\unnnn で不可視文字、絵文字、数学記号を強制エンコード可能",
		"",
		"<b>逐語的文字列 (Verbatim Strings)</b>  ",
		"C#では以下の文字列宣言は等価です：  ",
		"<color=#3c3cff>string</color> str = <color=#a64444>\"! \" \\' ?\"</color>;  ",
		"<color=#3c3cff>string</color> str = <color=#a64444>@\"! \"\" ' ?\"</color>;  ",
		"@ で始まる宣言は逐語的文字列です。この中では \"\" が \" と解釈され、標準の文字列エスケープとは挙動が異なります。  ",
		"統一のため、ゲーム本体では<b>標準の文字列エスケープ記法</b>を使用し、逐語的文字列は採用しません。",
		"",
		"現在、任意の連続する2文字を検査したい要件：  ",
		"1文字目が [ ] ( ) { } . * + ? ^ $ | \\ \" ' のいずれか  ",
		"2文字目が上記特殊記号でない場合 → 一致成功",
		"",
		"難易度低減のため、全ての入力データで以下を約束します：",
		"1. 記号は全て半角英数記号",
		"2. 各テストケースに複数の一致結果が存在する可能性",
		"",
		"",
		"右側のテストをすべて通過する正規表現を作成してください。"
	],
	"m_SystemLanguage":"Japanese"
}