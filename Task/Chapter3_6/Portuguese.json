{
	"m_DescList":[
		"Atribuímos significados especiais a certos símbolos:  ",
		"<color=#FF68DD>*</color>     Corresponde à regex anterior zero ou mais vezes  ",
		"<color=#FF68DD>?</color>    Corresponde ao elemento anterior zero ou uma vez  ",
		"<color=#3173FF>[]</color>    Especifica um conjunto de caracteres  ",
		"",
		"Porém, isso introduz novos problemas.  ",
		"Como escrever um regex para corresponder à parte azul da string \"interesting, <color=#3c3cff>[?*]</color> 123\"?  ",
		"",
		"Normalmente, use a barra invertida \"\" para forçar o caractere seguinte a manter seu significado literal.  ",
		"<color=#666666>Acima da tecla Enter em teclados qwerty</color>  ",
		"",
		"Exemplo: <color=#AB2800>\\[\\?\\*\\]</color> corresponde a:  ",
		"<color=#666666>interesting,</color> <color=#3c3cff>[?*]</color> <color=#666666>123</color>",
		"",
		"<b>Símbolos Comumente Escapados</b>  ",
		"[ ] ( ) { } . * + ? ^ $ | \\ \" '  ",
		"Esses símbolos exigem escape com \\  ",
		"Exemplo: Usar <color=#AB2800>\\\\</color> para corresponder a <color=#3c3cff>C:\\Windows\\xxx</color> resulta em:  ",
		"C:<color=#3c3cff>\\</color>Windows\\xxx  ",
		"C:\\Windows<color=#3c3cff>\\</color>xxx  ",
		"",
		"<b>Classes de Caracteres Pré-definidas/Controles</b>  ",
		"\\t Corresponde ao caractere de tabulação \\u0009  ",
		"\\n Corresponde ao caractere de nova linha \\u000A  ",
		"\\r Corresponde ao retorno de carro \\u000D  ",
		"",
		"<b>Notação de Escape Hexadecimal</b>  ",
		"\\unnnn Ex.: \\u0009 representa o caractere Unicode no ponto de código 9  ",
		"\\unnnn pode codificar forçosamente caracteres invisíveis, emojis ou símbolos matemáticos  ",
		"",
		"<b>Cadeias de Caracteres Literais (Verbatim)</b>  ",
		"Em C#, as seguintes declarações são equivalentes:  ",
		"<color=#3c3cff>string</color> str = <color=#a64444>\"! \" \\' ?\"</color>;  ",
		"<color=#3c3cff>string</color> str = <color=#a64444>@\"! \"\" ' ?\"</color>;  ",
		"O prefixo @ denota uma string literal. Nelas, \"\" é tratado como \", diferindo do escape padrão.  ",
		"Para consistência, o jogo utiliza <b>escape padrão de strings</b> em vez de strings literais.  ",
		"",
		"Agora, objetivamos detectar quaisquer dois caracteres adjacentes onde:  ",
		"- O primeiro caractere é um de: [ ] ( ) { } . * + ? ^ $ | \\ \" '  ",
		"- O segundo caractere NÃO é um símbolo especial desse conjunto  ",
		"",
		"Para reduzir dificuldade, regras aplicam-se a 100% dos dados de entrada:  ",
		"1. Todos os símbolos são caracteres ingleses de meia-largura  ",
		"2. Cada caso de teste pode conter múltiplas correspondências válidas  ",
		"",
		"",
		"Por favor, construa uma expressão regular que passe em todos os testes à direita."
	],
	"m_SystemLanguage":"Portuguese"
}