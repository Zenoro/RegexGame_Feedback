{
	"m_DescList":[
		"Asignamos significados especiales a ciertos símbolos, como:  ",
		"<color=#FF68DD>*</color>     Coincide con la expresión regular anterior cero o más veces  ",
		"<color=#FF68DD>?</color>    Coincide con el elemento anterior cero o una vez  ",
		"<color=#3173FF>[]</color>    Especifica un conjunto de caracteres  ",
		"",
		"Sin embargo, esto introduce nuevos problemas.  ",
		"¿Cómo debería escribir una regex para coincidir con la parte azul de la cadena \"interesting, <color=#3c3cff>[?*]</color> 123\"?  ",
		"",
		"Normalmente, se usa la barra invertida \"\" para forzar que el siguiente carácter conserve su significado literal.  ",
		"<color=#666666>Encima de la tecla Enter en teclados qwerty</color>  ",
		"",
		"Por ejemplo, <color=#AB2800>\\[\\?\\*\\]</color> coincide con:  ",
		"<color=#666666>interesting,</color> <color=#3c3cff>[?*]</color> <color=#666666>123</color>",
		"",
		"<b>Símbolos de escape comunes</b>  ",
		"[ ] ( ) { } . * + ? ^ $ | \\ \" '  ",
		"Estos símbolos requieren escape con \\  ",
		"Ejemplo: Usar <color=#AB2800>\\\\</color> para coincidir <color=#3c3cff>C:\\Windows\\xxx</color> produce:  ",
		"C:<color=#3c3cff>\\</color>Windows\\xxx  ",
		"C:\\Windows<color=#3c3cff>\\</color>xxx  ",
		"",
		"<b>Clases de caracteres predefinidas/controles</b>  ",
		"\\t Coincide con tabulador \\u0009  ",
		"\\n Coincide con salto de línea \\u000A  ",
		"\\r Coincide con retorno de carro \\u000D  ",
		"",
		"<b>Notación de escape hexadecimal</b>  ",
		"\\unnnn Ej. \\u0009 representa el carácter Unicode en punto de código 9  ",
		"\\unnnn puede codificar forzosamente caracteres invisibles, emojis o símbolos matemáticos  ",
		"",
		"<b>Cadenas textuales (verbatim)</b>  ",
		"En C#, las siguientes declaraciones son equivalentes:  ",
		"<color=#3c3cff>string</color> str = <color=#a64444>\"! \" \\' ?\"</color>;  ",
		"<color=#3c3cff>string</color> str = <color=#a64444>@\"! \"\" ' ?\"</color>;  ",
		"El prefijo @ denota cadena textual. En estas cadenas, \"\" se trata como \", difiriendo del escape estándar.  ",
		"Para mantener consistencia, el juego usa <b>escape de cadena estándar</b> en lugar de cadenas textuales.  ",
		"",
		"Ahora buscamos detectar dos caracteres adyacentes donde:  ",
		"- El primer carácter es uno de: [ ] ( ) { } . * + ? ^ $ | \\ \" '  ",
		"- El segundo carácter NO es un carácter especial del conjunto anterior  ",
		"",
		"Para reducir dificultad, se aplican estas reglas al 100% de los datos:  ",
		"1. Todos los símbolos son caracteres ingleses de medio ancho  ",
		"2. Cada caso de prueba puede contener múltiples coincidencias válidas  ",
		"",
		"",
		"Por favor construya una expresión regular que pase todas las pruebas a la derecha."
	],
	"m_SystemLanguage":"Spanish"
}