{
	"m_DescList":[
		"Bazı sembollere özel anlamlar atadık, örneğin:  ",
		"<color=#FF68DD>*</color>     Önceki regex ifadesini sıfır veya daha fazla kez eşleştir  ",
		"<color=#FF68DD>?</color>    Önceki öğeyi sıfır veya bir kez eşleştir  ",
		"<color=#3173FF>[]</color>    Bir karakter kümesi belirtir  ",
		"",
		"Ancak bu yeni sorunlar doğurur.  ",
		"\"interesting, <color=#3c3cff>[?*]</color> 123\" dizesinin mavi kısmını eşleştirmek için nasıl bir regex yazmalıyım?  ",
		"",
		"Genellikle, ters eğik çizgi \"\" kullanarak sonraki karakterin gerçek anlamını korumasını sağlayın.  ",
		"<color=#666666>Qwerty klavyelerde Enter tuşunun üzerinde</color>  ",
		"",
		"Örneğin, <color=#AB2800>\\[\\?\\*\\]</color> şunu eşleştirir:  ",
		"<color=#666666>interesting,</color> <color=#3c3cff>[?*]</color> <color=#666666>123</color>",
		"",
		"<b>Yaygın Kaçış Sembolleri</b>  ",
		"[ ] ( ) { } . * + ? ^ $ | \\ \" '  ",
		"Bu semboller \\ ile kaçılmalıdır  ",
		"Örnek: <color=#3c3cff>C:\\Windows\\xxx</color> eşleşmesi için <color=#AB2800>\\\\</color> kullanmak şunu verir:  ",
		"C:<color=#3c3cff>\\</color>Windows\\xxx  ",
		"C:\\Windows<color=#3c3cff>\\</color>xxx  ",
		"",
		"<b>Ön Tanımlı Karakter Sınıfları/Kontrol Karakterleri</b>  ",
		"\\t Sekme karakterini eşleştirir \\u0009  ",
		"\\n Satırsonu karakterini eşleştirir \\u000A  ",
		"\\r Satırbaşı karakterini eşleştirir \\u000D  ",
		"",
		"<b>Onaltılık Kaçış Notasyonu</b>  ",
		"\\unnnn Örn. \\u0009, 9 kod noktasındaki Unicode karakterini temsil eder  ",
		"\\unnnn görünmez karakterleri, emojileri veya matematiksel sembolleri zorla kodlayabilir  ",
		"",
		"<b>Verbatim Stringler (Kelimesi Kelimesine Dizeler)</b>  ",
		"C#'ta aşağıdaki dize tanımlamaları eşdeğerdir:  ",
		"<color=#3c3cff>string</color> str = <color=#a64444>\"! \" \\' ?\"</color>;  ",
		"<color=#3c3cff>string</color> str = <color=#a64444>@\"! \"\" ' ?\"</color>;  ",
		"@ öneki verbatim stringi belirtir. Bu dizelerde \"\" \" olarak işlenir, standart dize kaçışından farklıdır.  ",
		"Tutarlılık için oyun <b>standart dize kaçışını</b> kullanır, verbatim stringleri kullanmaz.  ",
		"",
		"Şimdi, aşağıdaki koşulları sağlayan herhangi iki bitişik karakteri tespit etmeyi amaçlıyoruz:  ",
		"- İlk karakter şunlardan biri olmalı: [ ] ( ) { } . * + ? ^ $ | \\ \" '  ",
		"- İkinci karakter yukarıdaki özel karakterlerden BİRİ OLMAMALI  ",
		"",
		"Zorluğu azaltmak için, girdi verilerinin %100'üne şu kurallar uygulanır:  ",
		"1. Tüm semboller İngilizce yarım genişlikte karakterlerdir  ",
		"2. Her test durumu birden fazla geçerli eşleşme içerebilir  ",
		"",
		"",
		"Lütfen sağdaki tüm testleri geçen bir düzenli ifade oluşturun."
	],
	"m_SystemLanguage":"Turkish"
}