{
	"m_DescList":[
		"众所周知，课本上教的内容总比实际应用简单很多。",
		"前面已经提到了，<color=#05C3BA>( | )</color> 可以用来匹配几种不同的内容。现在，将拆解更为复杂的嵌套正则表达式。",
		"",
		"<color=#05C3BA>( ( ) )</color> 表述嵌套的正则表达式。",
		"",
		"<color=#05C3BA>((</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3 </color><color=#05C3BA>| </color><color=#AB2800>_</color><color=#05C3BA>)</color> 由两层嵌套正则表达式组成，可以拆解为以下两部分:",
		"1. <color=#05C3BA>(</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3</color>   首字符为\"0\" 或 \"1\", 第二个字符为 \"3\"",
		"2. <color=#AB2800>_</color>             字符 \"_\"",
		"",
		"例如，<color=#05C3BA>((</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3 </color><color=#05C3BA>| </color><color=#AB2800>_</color><color=#05C3BA>)</color> 匹配 <color=#3c3cff>03134_</color> 中的",
		"<color=#3c3cff>03</color><color=#666666>134_</color>     由 <color=#05C3BA>(</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3 </color> 匹配",
		"<color=#666666>03</color><color=#3c3cff>13</color><color=#666666>4_</color>     由 <color=#05C3BA>(</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3 </color> 匹配",
		"<color=#666666>03134</color><color=#3c3cff>_</color>     由 <color=#AB2800>_</color> 匹配",
		"",
		"<color=#05C3BA>()</color> 允许嵌套复杂的多层正则表达式，例如 <color=#05C3BA>(</color><color=#3173FF>[</color><color=#AB2800>0</color><color=#3173FF>-</color><color=#AB2800>9</color><color=#3173FF>]</color><color=#FF68DD>+ </color><color=#05C3BA>| (</color><color=#AB2800>yes </color><color=#05C3BA>| </color><color=#AB2800>no</color><color=#05C3BA>)</color><color=#3173FF>\\s</color><color=#FF68DD>+ </color><color=#05C3BA>| </color><color=#AB2800>a</color><color=#FF68DD>{2,}</color><color=#3173FF>\\d</color><color=#FF68DD>?</color><color=#05C3BA>)</color> 是合法的正则表达式，其含义是：",
		"1. <color=#3173FF>[</color><color=#AB2800>0</color><color=#3173FF>-</color><color=#AB2800>9</color><color=#3173FF>]</color><color=#FF68DD>+</color>",
		"2. <color=#05C3BA>(</color><color=#AB2800>yes </color><color=#05C3BA>| </color><color=#AB2800>no</color><color=#05C3BA>)</color><color=#3173FF>\\s</color><color=#FF68DD>+</color>",
		"3. <color=#AB2800>a</color><color=#FF68DD>{2,}</color><color=#3173FF>\\d</color><color=#FF68DD>?</color>",
		"在非常复杂的应用常见中，会嵌套很多层正则表达式，理解和调试的难度直线上升。",
		"",
		"",
		"在 C# 代码中，一个常见的字段声明由下列内容组成：",
		"1. 访问权限，<color=#3c3cff>public private internal protected</color> 中的0个或1个",
		"2. 静态标记，<color=#3c3cff>static</color>，可存在可不存在。如果存在此标记则为静态字段，否则为实例字段",
		"3. 只读标记，<color=#3c3cff>readonly</color>，可存在可不存在。如果存在此标记则字段为只读不可写字段，否则在构造函数结束后可读可写",
		"4. 变量类型名称，必须存在。一般首字母为英文字母大小写或下划线，随后跟随若干个字词字符",
		"5. 变量名称，必须存在。一般首字母为英文字母大小写或下划线，随后跟随若干个字词字符",
		"6. 一个 \";\" 代表语句结束",
		"",
		"不同内容之间使用空格字符连接。虽然大多数程序员使用但空格字符连接，但多按几个空格也是合法声明。",
		"",
		"以下声明均为<b>合法声明</b>：",
		"<color=#3c3cff>public static readonly</color> object aa;",
		"<color=#3c3cff>protected byte</color> _1   ;",
		"<color=#3c3cff>internal readonly long</color> bcd;",
		"<color=#3c3cff>short</color> m_Value;",
		"",
		"以下声明均为<b>不合法声明</b>：",
		"<color=#3c3cff>public</color> object; <color=#117722>// 缺少变量名称</color>",
		"<color=#3c3cff>short</color> m_Value <color=#117722>// 缺少分号 ;</color>",
		"<color=#3c3cff>public static readonly</color> object a!#; <color=#117722>// 变量名称包含非字词字符 ! #</color>",
		"",
		"现在，期望设计一个正则表达式，模拟编译器匹配下合法的字段声明。",
		"",
		"<color=#666666>现在，请发动惊人的观察力，面向答案编程(划掉)</color>",
		"",
		"<color=#666666>提示：本题只需要套入嵌套层数为2的 (() | () | ()) () () 模板即可。题目本身不要求最简正则表达式。</color>",
		"",
		"对于100%的输入数据，为了降低题目难度，约定以下规则：",
		"1. 变量类型无泛型，不会存在 \"List<int>\" 中的 \"<\" 和 \">\"",
		"2. 每条输入数据只有一个待检测的字段声明",
		"3. 如果输入数据保护不符合规范的内容，则没有输出",
		"",
		"<color=#666666>此题较难，不行就跳过...</color>",
		"",
		"",
		"请构造一个正则表达式使之通过右侧所有测试。",
		""
	],
	"m_SystemLanguage":"ChineseSimplified"
}