{
	"m_DescList":[
		"As is well known, textbook content is always simpler than real-world applications.  ",
		"As mentioned earlier, <color=#05C3BA>( | )</color> can match several different patterns. Now, we will deconstruct more complex nested regular expressions.  ",
		"",
		"<color=#05C3BA>( ( ) )</color> represents nested regular expressions.  ",
		"",
		"<color=#05C3BA>((</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3 </color><color=#05C3BA>| </color><color=#AB2800>_</color><color=#05C3BA>)</color> consists of two layers of nested regex and can be broken down into:  ",
		"1. <color=#05C3BA>(</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3</color>   First character is \"0\" or \"1\", second is \"3\"  ",
		"2. <color=#AB2800>_</color>             Character \"_\"  ",
		"",
		"For example, <color=#05C3BA>((</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3 </color><color=#05C3BA>| </color><color=#AB2800>_</color><color=#05C3BA>)</color> matches the following in <color=#3c3cff>03134_</color>:  ",
		"<color=#3c3cff>03</color><color=#666666>134_</color>     Matched by <color=#05C3BA>(</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3</color>",
		"<color=#666666>03</color><color=#3c3cff>13</color><color=#666666>4_</color>     Matched by <color=#05C3BA>(</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3</color>",
		"<color=#666666>03134</color><color=#3c3cff>_</color>     Matched by <color=#AB2800>_</color> ",
		"",
		"<color=#05C3BA>()</color> allows nesting multi-layer regex, e.g., <color=#05C3BA>(</color><color=#3173FF>[</color><color=#AB2800>0</color><color=#3173FF>-</color><color=#AB2800>9</color><color=#3173FF>]</color><color=#FF68DD>+ </color><color=#05C3BA>| (</color><color=#AB2800>yes </color><color=#05C3BA>| </color><color=#AB2800>no</color><color=#05C3BA>)</color><color=#3173FF>\\s</color><color=#FF68DD>+ </color><color=#05C3BA>| </color><color=#AB2800>a</color><color=#FF68DD>{2,}</color><color=#3173FF>\\d</color><color=#FF68DD>?</color><color=#05C3BA>)</color> is valid, meaning:  ",
		"1. <color=#3173FF>[</color><color=#AB2800>0</color><color=#3173FF>-</color><color=#AB2800>9</color><color=#3173FF>]</color><color=#FF68DD>+</color>  ",
		"2. <color=#05C3BA>(</color><color=#AB2800>yes </color><color=#05C3BA>| </color><color=#AB2800>no</color><color=#05C3BA>)</color><color=#3173FF>\\s</color><color=#FF68DD>+</color>",
		"3. <color=#AB2800>a</color><color=#FF68DD>{2,}</color><color=#3173FF>\\d</color><color=#FF68DD>?</color>",
		"In highly complex scenarios, deeply nested regex significantly increases comprehension and debugging difficulty.  ",
		"",
		"In C# code, a typical field declaration consists of:  ",
		"1. Access modifier: zero or one of <color=#3c3cff>public private internal protected</color>  ",
		"2. Static modifier: <color=#3c3cff>static</color> (optional; indicates static field)  ",
		"3. Readonly modifier: <color=#3c3cff>readonly</color> (optional; indicates read-only field)  ",
		"4. Type name (required): Starts with uppercase/lowercase letter or underscore, followed by word characters  ",
		"5. Variable name (required): Starts with uppercase/lowercase letter or underscore, followed by word characters  ",
		"6. Semicolon \";\" (statement terminator)  ",
		"",
		"Elements are separated by whitespace. While single spaces are common, multiple spaces remain valid.  ",
		"",
		"<b>Valid declarations</b>:  ",
		"<color=#3c3cff>public static readonly</color> object aa;  ",
		"<color=#3c3cff>protected byte</color> _1   ;  ",
		"<color=#3c3cff>internal readonly long</color> bcd;  ",
		"<color=#3c3cff>short</color> m_Value;  ",
		"",
		"<b>Invalid declarations</b>:  ",
		"<color=#3c3cff>public</color> object; <color=#117722>// Missing variable name</color>  ",
		"<color=#3c3cff>short</color> m_Value <color=#117722>// Missing semicolon ;</color>  ",
		"<color=#3c3cff>public static readonly</color> object a!#; <color=#117722>// Variable name contains non-word characters ! #</color>  ",
		"",
		"The task is to design a regex that matches valid field declarations as a compiler would.  ",
		"",
		"<color=#666666>Now, harness your remarkable observation skills for answer-oriented coding (scratch that)</color>  ",
		"",
		"<color=#666666>Hint: This problem only requires a two-level nested template: (() | () | ()) () (). Optimal regex is not required.</color>  ",
		"",
		"To reduce difficulty, 100% of test inputs follow these rules:  ",
		"1. No generics in types (e.g., no \"<\" or \">\" in \"List<int>\")  ",
		"2. Each input contains exactly one field declaration  ",
		"3. Non-compliant inputs produce no output  ",
		"",
		"<color=#666666>This problem is challengingâ€”skip if stuck...</color>  ",
		"",
		"",
		"Construct a regex that passes all tests on the right.  "
	],
	"m_SystemLanguage":"English"
}