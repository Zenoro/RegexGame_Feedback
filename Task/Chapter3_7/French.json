{
	"m_DescList":[
		"Comme chacun le sait, le contenu des manuels est toujours plus simple que les applications réelles.  ",
		"Comme mentionné précédemment, <color=#05C3BA>( | )</color> peut correspondre à plusieurs motifs différents. Nous allons maintenant déconstruire des expressions régulières imbriquées plus complexes.  ",
		"",
		"<color=#05C3BA>( ( ) )</color> représente des expressions régulières imbriquées.  ",
		"",
		"<color=#05C3BA>((</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3 </color><color=#05C3BA>| </color><color=#AB2800>_</color><color=#05C3BA>)</color> comporte deux couches d'imbrication et peut être décomposé en :  ",
		"1. <color=#05C3BA>(</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3</color>   Premier caractère \"0\" ou \"1\", deuxième caractère \"3\"  ",
		"2. <color=#AB2800>_</color>             Caractère \"_\"  ",
		"",
		"Par exemple, <color=#05C3BA>((</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3 </color><color=#05C3BA>| </color><color=#AB2800>_</color><color=#05C3BA>)</color> correspond aux éléments suivants dans <color=#3c3cff>03134_</color> :  ",
		"<color=#3c3cff>03</color><color=#666666>134_</color>     Correspond à <color=#05C3BA>(</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3</color>  ",
		"<color=#666666>03</color><color=#3c3cff>13</color><color=#666666>4_</color>     Correspond à <color=#05C3BA>(</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3</color>",
		"<color=#666666>03134</color><color=#3c3cff>_</color>     Correspond à <color=#AB2800>_</color> ",
		"",
		"<color=#05C3BA>()</color> permet l'imbrication multi-niveaux, ex. <color=#05C3BA>(</color><color=#3173FF>[</color><color=#AB2800>0</color><color=#3173FF>-</color><color=#AB2800>9</color><color=#3173FF>]</color><color=#FF68DD>+ </color><color=#05C3BA>| (</color><color=#AB2800>yes </color><color=#05C3BA>| </color><color=#AB2800>no</color><color=#05C3BA>)</color><color=#3173FF>\\s</color><color=#FF68DD>+ </color><color=#05C3BA>| </color><color=#AB2800>a</color><color=#FF68DD>{2,}</color><color=#3173FF>\\d</color><color=#FF68DD>?</color><color=#05C3BA>)</color> est valide et signifie :  ",
		"1. <color=#3173FF>[</color><color=#AB2800>0</color><color=#3173FF>-</color><color=#AB2800>9</color><color=#3173FF>]</color><color=#FF68DD>+</color>",
		"2. <color=#05C3BA>(</color><color=#AB2800>yes </color><color=#05C3BA>| </color><color=#AB2800>no</color><color=#05C3BA>)</color><color=#3173FF>\\s</color><color=#FF68DD>+</color>",
		"3. <color=#AB2800>a</color><color=#FF68DD>{2,}</color><color=#3173FF>\\d</color><color=#FF68DD>?</color>",
		"Dans des scénarios complexes, les regex profondément imbriquées augmentent significativement la difficulté de compréhension et de débogage.  ",
		"",
		"En C#, une déclaration de champ typique comprend :  ",
		"1. Modificateur d'accès : zéro ou un élément parmi <color=#3c3cff>public private internal protected</color>  ",
		"2. Modificateur static : <color=#3c3cff>static</color> (optionnel ; indique un champ statique)  ",
		"3. Modificateur readonly : <color=#3c3cff>readonly</color> (optionnel ; indique un champ en lecture seule)  ",
		"4. Nom du type (requis) : Commence par une lettre majuscule/minuscule ou underscore, suivi de caractères alphanumériques  ",
		"5. Nom de variable (requis) : Commence par une lettre majuscule/minuscule ou underscore, suivi de caractères alphanumériques  ",
		"6. Point-virgule \";\" (terminateur d'instruction)  ",
		"",
		"Les éléments sont séparés par des espaces. Bien qu'un seul espace soit courant, les espaces multiples restent valides.  ",
		"",
		"<b>Déclarations valides</b> :  ",
		"<color=#3c3cff>public static readonly</color> object aa;  ",
		"<color=#3c3cff>protected byte</color> _1   ;  ",
		"<color=#3c3cff>internal readonly long</color> bcd;  ",
		"<color=#3c3cff>short</color> m_Value;  ",
		"",
		"<b>Déclarations invalides</b> :  ",
		"<color=#3c3cff>public</color> object; <color=#117722>// Nom de variable manquant</color>  ",
		"<color=#3c3cff>short</color> m_Value <color=#117722>// Point-virgule ; manquant</color>  ",
		"<color=#3c3cff>public static readonly</color> object a!#; <color=#117722>// Caractères non-alphanumériques ! #</color>  ",
		"",
		"L'objectif est de concevoir une expression régulière validant les déclarations de champ comme le ferait un compilateur.  ",
		"",
		"<color=#666666>Mobilisez maintenant vos remarquables capacités d'observation pour un codage orienté solution (rayez cette mention)</color>  ",
		"",
		"<color=#666666>Indice : Ce problème nécessite un modèle à deux niveaux d'imbrication : (() | () | ()) () (). L'optimalité de l'expression n'est pas requise.</color>  ",
		"",
		"Pour réduire la difficulté, 100% des entrées respectent ces règles :  ",
		"1. Aucun générique dans les types (ex. pas de \"<\" ou \">\" dans \"List<int>\")  ",
		"2. Chaque entrée contient exactement une déclaration de champ  ",
		"3. Les entrées non conformes ne génèrent aucune sortie  ",
		"",
		"<color=#666666>Ce problème est difficile... n'hésitez pas à passer si besoin</color>  ",
		"",
		"",
		"Construisez une expression régulière passant tous les tests à droite.  "
	],
	"m_SystemLanguage":"French"
}