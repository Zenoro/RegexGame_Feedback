{
	"m_DescList":[
		"Wie allgemein bekannt, sind Lehrbuchinhalte stets simpler als praktische Anwendungen.  ",
		"Wie bereits erwähnt, kann <color=#05C3BA>( | )</color> verschiedene Inhalte abgleichen. Nun wird die Dekonstruktion komplexerer verschachtelter regulärer Ausdrücke folgen.  ",
		"",
		"<color=#05C3BA>( ( ) )</color> beschreibt verschachtelte reguläre Ausdrücke.  ",
		"",
		"<color=#05C3BA>((</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3 </color><color=#05C3BA>| </color><color=#AB2800>_</color><color=#05C3BA>)</color> besteht aus zwei Ebenen verschachtelter Regex und lässt sich in folgende Teile zerlegen:  ",
		"1. <color=#05C3BA>(</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3</color>   Erstes Zeichen ist \"0\" oder \"1\", zweites Zeichen \"3\"  ",
		"2. <color=#AB2800>_</color>             Zeichen \"_\"  ",
		"",
		"Beispiel: <color=#05C3BA>((</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3 </color><color=#05C3BA>| </color><color=#AB2800>_</color><color=#05C3BA>)</color> findet in <color=#3c3cff>03134_</color> folgende Treffer:  ",
		"<color=#3c3cff>03</color><color=#666666>134_</color>     Gefunden durch <color=#05C3BA>(</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3</color>  ",
		"<color=#666666>03</color><color=#3c3cff>13</color><color=#666666>4_</color>     Gefunden durch <color=#05C3BA>(</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3</color>",
		"<color=#666666>03134</color><color=#3c3cff>_</color>     Gefunden durch <color=#AB2800>_</color> ",
		"",
		"<color=#05C3BA>()</color> ermöglicht komplexe Mehrfachverschachtelungen, z.B. ist <color=#05C3BA>(</color><color=#3173FF>[</color><color=#AB2800>0</color><color=#3173FF>-</color><color=#AB2800>9</color><color=#3173FF>]</color><color=#FF68DD>+ </color><color=#05C3BA>| (</color><color=#AB2800>yes </color><color=#05C3BA>| </color><color=#AB2800>no</color><color=#05C3BA>)</color><color=#3173FF>\\s</color><color=#FF68DD>+ </color><color=#05C3BA>| </color><color=#AB2800>a</color><color=#FF68DD>{2,}</color><color=#3173FF>\\d</color><color=#FF68DD>?</color><color=#05C3BA>)</color> ein valider Ausdruck mit dieser Bedeutung:  ",
		"1. <color=#3173FF>[</color><color=#AB2800>0</color><color=#3173FF>-</color><color=#AB2800>9</color><color=#3173FF>]</color><color=#FF68DD>+</color>",
		"2. <color=#05C3BA>(</color><color=#AB2800>yes </color><color=#05C3BA>| </color><color=#AB2800>no</color><color=#05C3BA>)</color><color=#3173FF>\\s</color><color=#FF68DD>+</color>",
		"3. <color=#AB2800>a</color><color=#FF68DD>{2,}</color><color=#3173FF>\\d</color><color=#FF68DD>?</color>",
		"In hochkomplexen Szenarien erschweren tiefe Verschachtelungen Verständnis und Fehlerbehebung erheblich.  ",
		"",
		"In C#-Code besteht eine typische Felddeklaration aus:  ",
		"1. Zugriffsmodifikator: Null oder einer aus <color=#3c3cff>public private internal protected</color>  ",
		"2. Statischer Modifikator: <color=#3c3cff>static</color> (optional; kennzeichnet statische Felder)  ",
		"3. Schreibgeschützter Modifikator: <color=#3c3cff>readonly</color> (optional; kennzeichnet nur-lesbare Felder)  ",
		"4. Typname (erforderlich): Beginnt mit Groß-/Kleinbuchstabe oder Unterstrich, gefolgt von Wortzeichen  ",
		"5. Variablenname (erforderlich): Beginnt mit Groß-/Kleinbuchstabe oder Unterstrich, gefolgt von Wortzeichen  ",
		"6. Semikolon \";\" (Abschlusszeichen)  ",
		"",
		"Elemente werden durch Leerzeichen getrennt. Einfache Leerzeichen sind üblich, mehrere bleiben valide.  ",
		"",
		"<b>Valide Deklarationen</b>:  ",
		"<color=#3c3cff>public static readonly</color> object aa;  ",
		"<color=#3c3cff>protected byte</color> _1   ;  ",
		"<color=#3c3cff>internal readonly long</color> bcd;  ",
		"<color=#3c3cff>short</color> m_Value;  ",
		"",
		"<b>Invalide Deklarationen</b>:  ",
		"<color=#3c3cff>public</color> object; <color=#117722>// Fehlender Variablenname</color>  ",
		"<color=#3c3cff>short</color> m_Value <color=#117722>// Fehlendes Semikolon ;</color>  ",
		"<color=#3c3cff>public static readonly</color> object a!#; <color=#117722>// Ungültige Zeichen ! # im Namen</color>  ",
		"",
		"Ziel ist die Erstellung eines Regex, der valide Felddeklarationen wie ein Compiler erkennt.  ",
		"",
		"<color=#666666>Nun gilt es, bemerkenswerte Beobachtungsgabe für lösungsorientiertes Programmieren einzusetzen (durchgestrichen)</color>  ",
		"",
		"<color=#666666>Hinweis: Nur zweistufiges Schachtelungsmuster nötig: (() | () | ()) () (). Optimierung nicht erforderlich.</color>  ",
		"",
		"Zur Vereinfachung gelten für 100% der Testeingaben:  ",
		"1. Keine Generics (z.B. keine \"<\" oder \">\" in \"List<int>\")  ",
		"2. Jede Eingabe enthält genau eine Felddeklaration  ",
		"3. Ungültige Eingaben produzieren keine Ausgabe  ",
		"",
		"<color=#666666>Anspruchsvolle Aufgabe – bei Schwierigkeiten überspringen...</color>  ",
		"",
		"",
		"Konstruieren Sie einen Regex, der alle Tests rechts besteht.  "
	],
	"m_SystemLanguage":"German"
}