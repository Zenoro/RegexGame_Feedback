{
	"m_DescList":[
		"ご存知の通り、教科書の内容は実際の応用よりもずっと簡単です。  ",
		"前述のように、<color=#05C3BA>( | )</color> は複数の異なる内容をマッチングするために使用できます。ここでは、より複雑な入れ子構造の正規表現を分解していきます。  ",
		"",
		"<color=#05C3BA>( ( ) )</color>  は入れ子構造の正規表現を表します。  ",
		"",
		"<color=#05C3BA>((</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3 </color><color=#05C3BA>| </color><color=#AB2800>_</color><color=#05C3BA>)</color> 二層の入れ子正規表現で、以下の二つの部分に分解できます:  ",
		"1. <color=#05C3BA>(</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3</color>   最初の文字が \"0\" または \"1\"、二文字目が \"3\"  ",
		"2. <color=#AB2800>_</color>             文字 \"_\"  ",
		"",
		"例: <color=#05C3BA>((</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3 </color><color=#05C3BA>| </color><color=#AB2800>_</color><color=#05C3BA>)</color> は <color=#3c3cff>03134_</color> の中で以下をマッチします  ",
		"<color=#3c3cff>03</color><color=#666666>134_</color>     <color=#05C3BA>(</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3</color> でマッチ  ",
		"<color=#666666>03</color><color=#3c3cff>13</color><color=#666666>4_</color>     <color=#05C3BA>(</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3</color> でマッチ  ",
		"<color=#666666>03134</color><color=#3c3cff>_</color>     <color=#AB2800>_</color> でマッチ  ",
		"",
		"<color=#05C3BA>()</color> は複雑な多層の正規表現の入れ子を可能にします。例えば <color=#05C3BA>(</color><color=#3173FF>[</color><color=#AB2800>0</color><color=#3173FF>-</color><color=#AB2800>9</color><color=#3173FF>]</color><color=#FF68DD>+ </color><color=#05C3BA>| (</color><color=#AB2800>yes </color><color=#05C3BA>| </color><color=#AB2800>no</color><color=#05C3BA>)</color><color=#3173FF>\\s</color><color=#FF68DD>+ </color><color=#05C3BA>| </color><color=#AB2800>a</color><color=#FF68DD>{2,}</color><color=#3173FF>\\d</color><color=#FF68DD>?</color><color=#05C3BA>)</color> は有効な正規表現で、その意味は:  ",
		"1. <color=#3173FF>[</color><color=#AB2800>0</color><color=#3173FF>-</color><color=#AB2800>9</color><color=#3173FF>]</color><color=#FF68DD>+</color>",
		"2. <color=#05C3BA>(</color><color=#AB2800>yes </color><color=#05C3BA>| </color><color=#AB2800>no</color><color=#05C3BA>)</color><color=#3173FF>\\s</color><color=#FF68DD>+</color>",
		"3. <color=#AB2800>a</color><color=#FF68DD>{2,}</color><color=#3173FF>\\d</color><color=#FF68DD>?</color>",
		"非常に複雑な応用シナリオでは、多くのレイヤーの正規表現が入れ子になり、理解とデバッグの難易度が直線的に上昇します。  ",
		"",
		"C# コードにおいて、一般的なフィールド宣言は以下の要素で構成されます:  ",
		"1. アクセス修飾子: <color=#3c3cff>public, private, internal, protected</color> のいずれか1つ、または無し  ",
		"2. 静的修飾子: <color=#3c3cff>static</color> （存在する場合は静的フィールド、無い場合はインスタンスフィールド）  ",
		"3. 読み取り専用修飾子: <color=#3c3cff>readonly</color> （存在する場合はコンストラクタ終了後も書き換え不可、無い場合は読み書き可能）  ",
		"4. 変数の型名: 必須。通常、最初の文字が英大小文字またはアンダースコアで始まり、その後ろに複数の単語構成文字が続く  ",
		"5. 変数名: 必須。通常、最初の文字が英大小文字またはアンダースコアで始まり、その後ろに複数の単語構成文字が続く  ",
		"6. 文の終了を表すセミコロン \";\"  ",
		"",
		"異なる要素は空白文字で接続されます。多くのプログラマーが単一の空白を使用しますが、複数の空白も有効な宣言です。  ",
		"",
		"以下は全て<b>有効な宣言</b>です:  ",
		"<color=#3c3cff>public static readonly</color> object aa;  ",
		"<color=#3c3cff>protected byte</color> _1   ;  ",
		"<color=#3c3cff>internal readonly long</color> bcd;  ",
		"<color=#3c3cff>short</color> m_Value;  ",
		"",
		"以下は全て<b>無効な宣言</b>です:  ",
		"<color=#3c3cff>public</color> object; <color=#117722>// 変数名が不足</color>  ",
		"<color=#3c3cff>short</color> m_Value <color=#117722>// セミコロン ; が不足</color>  ",
		"<color=#3c3cff>public static readonly</color> object a!#; <color=#117722>// 変数名に非単語構成文字 ! # を含む</color>  ",
		"",
		"ここで、コンパイラのように有効なフィールド宣言をマッチングする正規表現を設計することが求められます。  ",
		"",
		"<color=#666666>さあ、驚異的な観察力を発揮し、答え指向プログラミングを...（取り消し線）</color>  ",
		"",
		"<color=#666666>ヒント：この問題では、入れ子レベルが2のテンプレート (() | () | ()) () () を適用するだけで十分です。問題自体は最簡正規表現を要求しません。</color>  ",
		"",
		"入力データの100%において、難易度を下げるために以下のルールを適用します:  ",
		"1. 変数の型にジェネリックは無し (\"List<int>\" 内の \"<\" や \">\" は存在しない)  ",
		"2. 各入力データには検証対象のフィールド宣言が1つだけ存在する  ",
		"3. 入力データが仕様に合わない内容を含む場合、出力は無し  ",
		"",
		"<color=#666666>この問題は難しいので、できなければスキップして...</color>  ",
		"",
		"",
		"右側の全てのテストを通過する正規表現を構築してください。"
	],
	"m_SystemLanguage":"Japanese"
}