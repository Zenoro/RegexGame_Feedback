{
	"m_DescList":[
		"교과서 내용은 항상 실제 응용보다 간단하다는 건 누구나 아는 사실입니다.",
		"앞서 설명했듯, <color=#05C3BA>( | )</color>는 여러 패턴을 매칭하는 데 사용됩니다. 이제 더 복잡한 중첩 정규 표현식을 해체해 보겠습니다.  ",
		"",
		"<color=#05C3BA>( ( ) )</color>는 중첩된 정규 표현식을 나타냅니다.  ",
		"",
		"<color=#05C3BA>((</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3 </color><color=#05C3BA>| </color><color=#AB2800>_</color><color=#05C3BA>)</color>는 두 층의 중첩으로 구성되며 다음과 같이 분해됩니다:  ",
		"1. <color=#05C3BA>(</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3</color>   첫 글자는 \"0\" 또는 \"1\", 두 번째 글자는 \"3\"  ",
		"2. <color=#AB2800>_</color>            \"_\" 문자  ",
		"",
		"예시: <color=#05C3BA>((</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3 </color><color=#05C3BA>| </color><color=#AB2800>_</color><color=#05C3BA>)</color>가 <color=#3c3cff>03134_</color>에서 매칭되는 부분  ",
		"<color=#3c3cff>03</color><color=#666666>134_</color>     <color=#05C3BA>(</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3</color>에 의해 매칭  ",
		"<color=#666666>03</color><color=#3c3cff>13</color><color=#666666>4_</color>     <color=#05C3BA>(</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3</color>에 의해 매칭  ",
		"<color=#666666>03134</color><color=#3c3cff>_</color>     <color=#AB2800>_</color>에 의해 매칭  ",
		"",
		"<color=#05C3BA>()</color>는 다중 층 정규식 중첩을 허용합니다.  ",
		"예: <color=#05C3BA>(</color><color=#3173FF>[</color><color=#AB2800>0</color><color=#3173FF>-</color><color=#AB2800>9</color><color=#3173FF>]</color><color=#FF68DD>+ </color><color=#05C3BA>| (</color><color=#AB2800>yes </color><color=#05C3BA>| </color><color=#AB2800>no</color><color=#05C3BA>)</color><color=#3173FF>\\s</color><color=#FF68DD>+ </color><color=#05C3BA>| </color><color=#AB2800>a</color><color=#FF68DD>{2,}</color><color=#3173FF>\\d</color><color=#FF68DD>?</color><color=#05C3BA>)</color>는 유효한 표현식으로:  ",
		"1. <color=#3173FF>[</color><color=#AB2800>0</color><color=#3173FF>-</color><color=#AB2800>9</color><color=#3173FF>]</color><color=#FF68DD>+</color>",
		"2. <color=#05C3BA>(</color><color=#AB2800>yes </color><color=#05C3BA>| </color><color=#AB2800>no</color><color=#05C3BA>)</color><color=#3173FF>\\s</color><color=#FF68DD>+</color>",
		"3. <color=#AB2800>a</color><color=#FF68DD>{2,}</color><color=#3173FF>\\d</color><color=#FF68DD>?</color>",
		"복잡한 실무 환경에선 중첩이 깊어져 이해/디버깅 난이도가 급상승합니다.  ",
		"",
		"<b>C# 필드 선언 구조</b>  ",
		"1. 접근 제한자: <color=#3c3cff>public private internal protected</color> 중 0~1개  ",
		"2. 정적 표시: <color=#3c3cff>static</color> (생략 가능, 존재 시 정적 필드)  ",
		"3. 읽기 전용: <color=#3c3cff>readonly</color> (생략 가능, 존재 시 생성자 종료 후 쓰기 불가)  ",
		"4. 변수 타입: 필수. 영문 대소문자/밑줄 시작 + 단어 문자 조합  ",
		"5. 변수명: 필수. 영문 대소문자/밑줄 시작 + 단어 문자 조합  ",
		"6. 세미콜론 <color=#3c3cff>;</color> (문장 종결)  ",
		"",
		"공백으로 연결되며, 다중 공백도 허용됩니다.  ",
		"",
		"<b>유효한 선언 예시</b>  ",
		"<color=#3c3cff>public static readonly</color> object aa;  ",
		"<color=#3c3cff>protected byte</color> _1   ;  ",
		"<color=#3c3cff>internal readonly long</color> bcd;  ",
		"<color=#3c3cff>short</color> m_Value;  ",
		"",
		"<b>잘못된 선언 예시</b>  ",
		"<color=#3c3cff>public</color> object; <color=#117722>// 변수명 누락</color>  ",
		"<color=#3c3cff>short</color> m_Value <color=#117722>// 세미콜론 ; 누락</color>  ",
		"<color=#3c3cff>public static readonly</color> object a!#; <color=#117722>// 변수명에 비단어 문자(!#) 포함</color>  ",
		"",
		"<b>과제</b>: 컴파일러 수준의 유효 필드 선언을 매칭하는 정규식 설계  ",
		"",
		"<color=#666666>✎ 힌트: 2단계 중첩 템플릿 (() | () | ()) () () 적용. 최적화 불필요</color>  ",
		"",
		"<color=#666666>✓ 제약사항</color>  ",
		"1. 제네릭 미사용 (예: <int> 없음)  ",
		"2. 입력당 단일 필드 선언만 존재  ",
		"3. 비정형 입력 시 출력 없음  ",
		"",
		"<color=#666666>※ 난이도 높음. 포기 시 생략 가능</color>  ",
		"",
		"",
		"오른쪽 테스트를 모두 통과하는 정규 표현식을 작성하세요. "
	],
	"m_SystemLanguage":"Korean"
}