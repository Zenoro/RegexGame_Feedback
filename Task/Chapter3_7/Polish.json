{
	"m_DescList":[
		"Jak powszechnie wiadomo, materiały w podręcznikach są zawsze prostsze niż rzeczywiste zastosowania.  ",
		"Jak wspomniano wcześniej, <color=#05C3BA>( | )</color> może dopasować różne wzorce. Teraz przeanalizujemy bardziej złożone, zagnieżdżone wyrażenia regularne.  ",
		"",
		"<color=#05C3BA>( ( ) )</color> reprezentuje zagnieżdżone wyrażenia regularne.  ",
		"",
		"<color=#05C3BA>((</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3 </color><color=#05C3BA>| </color><color=#AB2800>_</color><color=#05C3BA>)</color> składa się z dwóch warstw zagnieżdżonych i można go rozłożyć na:  ",
		"1. <color=#05C3BA>(</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3</color>   Pierwszy znak to \"0\" lub \"1\", drugi to \"3\"  ",
		"2. <color=#AB2800>_</color>             Znak \"_\"  ",
		"",
		"Np. <color=#05C3BA>((</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3 </color><color=#05C3BA>| </color><color=#AB2800>_</color><color=#05C3BA>)</color> dopasowuje następujące fragmenty w <color=#3c3cff>03134_</color>:  ",
		"<color=#3c3cff>03</color><color=#666666>134_</color>     Dopasowane przez <color=#05C3BA>(</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3</color>  ",
		"<color=#666666>03</color><color=#3c3cff>13</color><color=#666666>4_</color>     Dopasowane przez <color=#05C3BA>(</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3</color>  ",
		"<color=#666666>03134</color><color=#3c3cff>_</color>     Dopasowane przez <color=#AB2800>_</color>",
		"",
		"<color=#05C3BA>()</color> pozwala na wielowarstwowe zagnieżdżanie, np. <color=#05C3BA>(</color><color=#3173FF>[</color><color=#AB2800>0</color><color=#3173FF>-</color><color=#AB2800>9</color><color=#3173FF>]</color><color=#FF68DD>+ </color><color=#05C3BA>| (</color><color=#AB2800>yes </color><color=#05C3BA>| </color><color=#AB2800>no</color><color=#05C3BA>)</color><color=#3173FF>\\s</color><color=#FF68DD>+ </color><color=#05C3BA>| </color><color=#AB2800>a</color><color=#FF68DD>{2,}</color><color=#3173FF>\\d</color><color=#FF68DD>?</color><color=#05C3BA>)</color> jest poprawne i oznacza:  ",
		"1. <color=#3173FF>[</color><color=#AB2800>0</color><color=#3173FF>-</color><color=#AB2800>9</color><color=#3173FF>]</color><color=#FF68DD>+</color>",
		"2. <color=#05C3BA>(</color><color=#AB2800>yes </color><color=#05C3BA>| </color><color=#AB2800>no</color><color=#05C3BA>)</color><color=#3173FF>\\s</color><color=#FF68DD>+</color>",
		"3. <color=#AB2800>a</color><color=#FF68DD>{2,}</color><color=#3173FF>\\d</color><color=#FF68DD>?</color>",
		"W skomplikowanych przypadkach głębokie zagnieżdżanie znacznie utrudnia zrozumienie i debugowanie.  ",
		"",
		"W kodzie C# typowa deklaracja pola składa się z:  ",
		"1. Modyfikatora dostępu: zero lub jeden z <color=#3c3cff>public private internal protected</color>  ",
		"2. Modyfikatora static: <color=#3c3cff>static</color> (opcjonalny; pole statyczne)  ",
		"3. Modyfikatora readonly: <color=#3c3cff>readonly</color> (opcjonalny; pole tylko do odczytu)  ",
		"4. Nazwy typu (wymagana): Rozpoczyna się wielką/małą literą lub podkreśleniem, po której następują znaki słów  ",
		"5. Nazwy zmiennej (wymagana): Rozpoczyna się wielką/małą literą lub podkreśleniem, po której następują znaki słów  ",
		"6. Średnika \";\" (terminator instrukcji)  ",
		"",
		"Elementy rozdzielane są białymi znakami. Choć częste są pojedyncze spacje, wiele spacji też jest dopuszczalne.  ",
		"",
		"<b>Poprawne deklaracje</b>:  ",
		"<color=#3c3cff>public static readonly</color> object aa;  ",
		"<color=#3c3cff>protected byte</color> _1   ;  ",
		"<color=#3c3cff>internal readonly long</color> bcd;  ",
		"<color=#3c3cff>short</color> m_Value;  ",
		"",
		"<b>Niepoprawne deklaracje</b>:  ",
		"<color=#3c3cff>public</color> object; <color=#117722>// Brak nazwy zmiennej</color>  ",
		"<color=#3c3cff>short</color> m_Value <color=#117722>// Brak średnika ;</color>  ",
		"<color=#3c3cff>public static readonly</color> object a!#; <color=#117722>// Nazwa zawiera niedozwolone znaki ! #</color>  ",
		"",
		"Zadanie: zaprojektuj wyrażenie regularne dopasowujące poprawne deklaracje pól jak kompilator.  ",
		"",
		"<color=#666666>Wykorzystaj swoje bystre oko do programowania pod odpowiedź (przekreślone)</color>  ",
		"",
		"<color=#666666>Wskazówka: Wystarczy użyć szablonu z dwupoziomowym zagnieżdżeniem: (() | () | ()) () (). Nie jest wymagane optymalne wyrażenie.</color>  ",
		"",
		"Dla 100% danych testowych (dla uproszczenia):  ",
		"1. Brak generyków w typach (np. brak \"<\" lub \">\" w \"List<int>\")  ",
		"2. Każde wejście zawiera dokładnie jedną deklarację  ",
		"3. Niepoprawne dane nie generują wyniku  ",
		"",
		"<color=#666666>Zadanie trudne - w razie problemów pomiń...</color>  ",
		"",
		"",
		"Skonstruuj wyrażenie regularne, które przejdzie wszystkie testy po prawej."
	],
	"m_SystemLanguage":"Polish"
}