{
	"m_DescList":[
		"Como é amplamente conhecido, o conteúdo dos livros didáticos é sempre mais simples do que as aplicações reais.  ",
		"Como mencionado anteriormente, <color=#05C3BA>( | )</color> pode corresponder a vários padrões diferentes. Agora, vamos desconstruir expressões regulares aninhadas mais complexas.  ",
		"",
		"<color=#05C3BA>( ( ) )</color> representa expressões regulares aninhadas.  ",
		"",
		"<color=#05C3BA>((</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3 </color><color=#05C3BA>| </color><color=#AB2800>_</color><color=#05C3BA>)</color> consiste em duas camadas de regex aninhadas e pode ser decomposto em:  ",
		"1. <color=#05C3BA>(</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3</color>   Primeiro caractere é \"0\" ou \"1\", o segundo é \"3\"  ",
		"2. <color=#AB2800>_</color>             Caractere \"_\"  ",
		"",
		"Por exemplo, <color=#05C3BA>((</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3 </color><color=#05C3BA>| </color><color=#AB2800>_</color><color=#05C3BA>)</color> corresponde ao seguinte em <color=#3c3cff>03134_</color>:  ",
		"<color=#3c3cff>03</color><color=#666666>134_</color>     Correspondido por <color=#05C3BA>(</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3</color>",
		"<color=#666666>03</color><color=#3c3cff>13</color><color=#666666>4_</color>     Correspondido por <color=#05C3BA>(</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3</color>",
		"<color=#666666>03134</color><color=#3c3cff>_</color>     Correspondido por <color=#AB2800>_</color>",
		"",
		"<color=#05C3BA>()</color> permite aninhar regex de múltiplas camadas, ex.: <color=#05C3BA>(</color><color=#3173FF>[</color><color=#AB2800>0</color><color=#3173FF>-</color><color=#AB2800>9</color><color=#3173FF>]</color><color=#FF68DD>+ </color><color=#05C3BA>| (</color><color=#AB2800>yes </color><color=#05C3BA>| </color><color=#AB2800>no</color><color=#05C3BA>)</color><color=#3173FF>\\s</color><color=#FF68DD>+ </color><color=#05C3BA>| </color><color=#AB2800>a</color><color=#FF68DD>{2,}</color><color=#3173FF>\\d</color><color=#FF68DD>?</color><color=#05C3BA>)</color>",
		" é válido, significando:  ",
		"1. <color=#3173FF>[</color><color=#AB2800>0</color><color=#3173FF>-</color><color=#AB2800>9</color><color=#3173FF>]</color><color=#FF68DD>+</color> ",
		"2. <color=#05C3BA>(</color><color=#AB2800>yes </color><color=#05C3BA>| </color><color=#AB2800>no</color><color=#05C3BA>)</color><color=#3173FF>\\s</color><color=#FF68DD>+</color>",
		"3. <color=#AB2800>a</color><color=#FF68DD>{2,}</color><color=#3173FF>\\d</color><color=#FF68DD>?</color>",
		"Em cenários altamente complexos, regex profundamente aninhados aumentam significativamente a dificuldade de compreensão e depuração.  ",
		"",
		"Em código C#, uma declaração de campo típica consiste em:  ",
		"1. Modificador de acesso: zero ou um de <color=#3c3cff>public private internal protected</color>  ",
		"2. Modificador estático: <color=#3c3cff>static</color> (opcional; indica campo estático)  ",
		"3. Modificador readonly: <color=#3c3cff>readonly</color> (opcional; indica campo somente leitura)  ",
		"4. Nome do tipo (obrigatório): Inicia com letra maiúscula/minúscula ou sublinhado, seguido por caracteres alfanuméricos  ",
		"5. Nome da variável (obrigatório): Inicia com letra maiúscula/minúscula ou sublinhado, seguido por caracteres alfanuméricos  ",
		"6. Ponto e vírgula \";\" (terminador de declaração)  ",
		"",
		"Elementos são separados por espaços. Embora espaços únicos sejam comuns, múltiplos espaços permanecem válidos.  ",
		"",
		"<b>Declarações válidas</b>:  ",
		"<color=#3c3cff>public static readonly</color> object aa;  ",
		"<color=#3c3cff>protected byte</color> _1   ;  ",
		"<color=#3c3cff>internal readonly long</color> bcd;  ",
		"<color=#3c3cff>short</color> m_Value;  ",
		"",
		"<b>Declarações inválidas</b>:  ",
		"<color=#3c3cff>public</color> object; <color=#117722>// Nome de variável ausente</color>  ",
		"<color=#3c3cff>short</color> m_Value <color=#117722>// Ponto e vírgula ; ausente</color>  ",
		"<color=#3c3cff>public static readonly</color> object a!#; <color=#117722>// Nome contém caracteres não alfanuméricos ! #</color>  ",
		"",
		"A tarefa é criar um regex que corresponda a declarações de campo válidas como um compilador faria.  ",
		"",
		"<color=#666666>Agora, utilize suas notáveis habilidades de observação para programação orientada a respostas (riscar isso)</color>  ",
		"",
		"<color=#666666>Dica: Este problema requer apenas um modelo de aninhamento de dois níveis: (() | () | ()) () (). Regex ótimo não é necessário.</color>  ",
		"",
		"Para reduzir a dificuldade, 100% das entradas de teste seguem estas regras:  ",
		"1. Sem genéricos em tipos (ex.: sem \"<\" ou \">\" em \"List<int>\")  ",
		"2. Cada entrada contém exatamente uma declaração de campo  ",
		"3. Entradas não conformes não produzem saída  ",
		"",
		"<color=#666666>Este problema é desafiador — pule se precisar...</color>  ",
		"",
		"",
		"Construa um regex que passe em todos os testes à direita."
	],
	"m_SystemLanguage":"Portuguese"
}