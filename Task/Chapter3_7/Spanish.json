{
	"m_DescList":[
		"Como es bien sabido, lo que enseñan los libros de texto siempre es más simple que las aplicaciones reales.  ",
		"Como se mencionó anteriormente, <color=#05C3BA>( | )</color> puede coincidir con varios patrones diferentes. Ahora, desglosaremos expresiones regulares anidadas más complejas.  ",
		"",
		"<color=#05C3BA>( ( ) )</color> representa expresiones regulares anidadas.  ",
		"",
		"<color=#05C3BA>((</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3 </color><color=#05C3BA>| </color><color=#AB2800>_</color><color=#05C3BA>)</color> consta de dos capas de regex anidadas y puede descomponerse en:  ",
		"1. <color=#05C3BA>(</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3</color>   El primer carácter es \"0\" o \"1\", el segundo es \"3\"  ",
		"2. <color=#AB2800>_</color>             Carácter \"_\"  ",
		"",
		"Por ejemplo, <color=#05C3BA>((</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3 </color><color=#05C3BA>| </color><color=#AB2800>_</color><color=#05C3BA>)</color> coincide con lo siguiente en <color=#3c3cff>03134_</color>:  ",
		"<color=#3c3cff>03</color><color=#666666>134_</color>     Coincide con <color=#05C3BA>(</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3</color>",
		"<color=#666666>03</color><color=#3c3cff>13</color><color=#666666>4_</color>     Coincide con <color=#05C3BA>(</color><color=#AB2800>0 </color><color=#05C3BA>| </color><color=#AB2800>1</color><color=#05C3BA>) </color><color=#AB2800>3</color>",
		"<color=#666666>03134</color><color=#3c3cff>_</color>     Coincide con <color=#AB2800>_</color>  ",
		"",
		"<color=#05C3BA>()</color> permite anidar regex multicapa, p.ej. <color=#05C3BA>(</color><color=#3173FF>[</color><color=#AB2800>0</color><color=#3173FF>-</color><color=#AB2800>9</color><color=#3173FF>]</color><color=#FF68DD>+ </color><color=#05C3BA>| (</color><color=#AB2800>yes </color><color=#05C3BA>| </color><color=#AB2800>no</color><color=#05C3BA>)</color><color=#3173FF>\\s</color><color=#FF68DD>+ </color><color=#05C3BA>| </color><color=#AB2800>a</color><color=#FF68DD>{2,}</color><color=#3173FF>\\d</color><color=#FF68DD>?</color><color=#05C3BA>)</color> es válido, significando:  ",
		"1. <color=#3173FF>[</color><color=#AB2800>0</color><color=#3173FF>-</color><color=#AB2800>9</color><color=#3173FF>]</color><color=#FF68DD>+</color>",
		"2. <color=#05C3BA>(</color><color=#AB2800>yes </color><color=#05C3BA>| </color><color=#AB2800>no</color><color=#05C3BA>)</color><color=#3173FF>\\s</color><color=#FF68DD>+</color>",
		"3. <color=#AB2800>a</color><color=#FF68DD>{2,}</color><color=#3173FF>\\d</color><color=#FF68DD>?</color>",
		"En escenarios altamente complejos, el anidamiento profundo aumenta significativamente la dificultad de comprensión y depuración.  ",
		"",
		"En código C#, una declaración de campo típica consta de:  ",
		"1. Modificador de acceso: cero o uno de <color=#3c3cff>public private internal protected</color>  ",
		"2. Modificador estático: <color=#3c3cff>static</color> (opcional; indica campo estático)  ",
		"3. Modificador de solo lectura: <color=#3c3cff>readonly</color> (opcional; indica campo de solo lectura)  ",
		"4. Nombre del tipo (requerido): Comienza con letra mayúscula/minúscula o guión bajo, seguido de caracteres de palabra  ",
		"5. Nombre de variable (requerido): Comienza con letra mayúscula/minúscula o guión bajo, seguido de caracteres de palabra  ",
		"6. Punto y coma \";\" (terminador de declaración)  ",
		"",
		"Los elementos se separan por espacios. Aunque son comunes los espacios simples, múltiples espacios siguen siendo válidos.  ",
		"",
		"<b>Declaraciones válidas</b>:  ",
		"<color=#3c3cff>public static readonly</color> object aa;  ",
		"<color=#3c3cff>protected byte</color> _1   ;  ",
		"<color=#3c3cff>internal readonly long</color> bcd;  ",
		"<color=#3c3cff>short</color> m_Value;  ",
		"",
		"<b>Declaraciones inválidas</b>:  ",
		"<color=#3c3cff>public</color> object; <color=#117722>// Falta nombre de variable</color>  ",
		"<color=#3c3cff>short</color> m_Value <color=#117722>// Falta punto y coma ;</color>  ",
		"<color=#3c3cff>public static readonly</color> object a!#; <color=#117722>// Nombre contiene caracteres no válidos ! #</color>  ",
		"",
		"La tarea es diseñar una regex que coincida con declaraciones de campo válidas como lo haría un compilador.  ",
		"",
		"<color=#666666>Ahora, utiliza tus notables habilidades de observación para programación orientada a respuestas (táchalo)</color>  ",
		"",
		"<color=#666666>Pista: Este problema solo requiere una plantilla anidada de dos niveles: (() | () | ()) () (). No se requiere regex óptima.</color>  ",
		"",
		"Para reducir dificultad, el 100% de las entradas siguen estas reglas:  ",
		"1. Sin genéricos en tipos (p.ej. sin \"<\" o \">\" en \"List<int>\")  ",
		"2. Cada entrada contiene exactamente una declaración de campo  ",
		"3. Las entradas no compatibles no generan salida  ",
		"",
		"<color=#666666>Este problema es complejo — omítelo si te atascas...</color>  ",
		"",
		"",
		"Construye una regex que pase todas las pruebas a la derecha."
	],
	"m_SystemLanguage":"Spanish"
}