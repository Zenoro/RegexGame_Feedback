{
	"m_DescList":[
		"JSON 是一种轻量级的数据交换格式，广泛用于数据存储和传输。",
		"",
		"数据由键值对组成，键必须是字符串，值可以是字符串、数字、布尔值、数组、对象或 null",
		"",
		"例如，下文展示了一段 JSON 数据",
		"<color=#3c3cff>{</color>",
		"  <color=#3c3cff>\"key\"</color>: <color=#33aa55>1</color>,",
		"  <color=#3c3cff>\"array\"</color>: <color=#33aa55>[1</color>,<color=#33aa55>2]</color>,",
		"  <color=#3c3cff>\"Child\"</color>: <color=#33aa55>{</color>",
		"    <color=#3c3cff>\"Child2\"</color>: <color=#e06600>{}</color>",
		"  <color=#33aa55>}</color>，",
		"  <color=#3c3cff>\"string\"</color>: <color=#ee3300>\"[]{}\"</color>",
		"  <color=#3c3cff>\"Boolean\"</color>: <color=#3111aa>true</color>,",
		"<color=#3c3cff>}</color>",
		"",
		"最外侧为一组对称的 <color=#3c3cff>{ }</color>",
		"<color=#3c3cff>\"key\"</color>, <color=#3c3cff>\"array\"</color>, <color=#3c3cff>\"Child\"</color>, <color=#3c3cff>\"Child2\"</color>, <color=#3c3cff>\"string\"</color> 为键，",
		"",
		"<color=#33aa55>1</color>      为数字，",
		"<color=#33aa55>[ ]</color>     为数组，",
		"<color=#3111aa>true</color>  为布尔，",
		"<color=#ee3300>\"[]{}\"</color> 为字符串，",
		"<color=#e06600>{}</color>      为对象",
		"",
		"不难发现，最外侧一组对称的 <color=#3c3cff>{ }</color> 是对象的含义。上述示例中，匹配的大括号使用相同颜色标记。",
		"对象和数组内可以按照上述格式继续嵌套 字符串、数字、布尔值、数组、对象或 null。",
		"",
		"由于 <color=#33aa55>[ ]</color> <color=#3c3cff>{ }</color> <color=#ee3300>\" \"</color> 成对儿出现，可以用平衡组简单检测下 JSON 数据是否合法。",
		"",
		"为了简化问题，做出以下约定：",
		"1. 仅作简单的数量检查，不做复杂的格式检查。",
		"例如: { \"key\": [, \"key2\": ] } 虽然格式错误，但是关键字成对儿出现，平衡组检查通过",
		"2. <color=#ee3300>\"[]{}\"</color> 字符串内的符号不计入平衡组的匹配数量，被忽略",
		"3. 优先面向答案编程，仅需通过测试用例即可。无需制作一个100%检查所有JSON数据的正则表达式。",
		"",
		"<color=#666666>此题较难，不行就跳过...</color>",
		"",
		"请构造一个正则表达式使之通过右侧所有测试。"
	],
	"m_SystemLanguage":"ChineseSimplified"
}