{
	"m_DescList":[
		"JSONは軽量なデータ交換フォーマットであり、データ保存や転送に広く利用されています。",
		"",
		"データはキーと値のペアで構成され、キーは文字列である必要があります。値は文字列、数値、ブーリアン値、配列、オブジェクト、またはnullを取ることができます。",
		"",
		"例えば、以下にJSONデータの例を示します。",
		"<color=#3c3cff>{</color>",
		"  <color=#3c3cff>\"key\"</color>: <color=#33aa55>1</color>,",
		"  <color=#3c3cff>\"array\"</color>: <color=#33aa55>[1</color>,<color=#33aa55>2]</color>,",
		"  <color=#3c3cff>\"Child\"</color>: <color=#33aa55>{</color>",
		"    <color=#3c3cff>\"Child2\"</color>: <color=#e06600>{}</color>",
		"  <color=#33aa55>}</color>， <!-- 注: 原文にカンマあり -->",
		"  <color=#3c3cff>\"string\"</color>: <color=#ee3300>\"[]{}\"</color>",
		"  <color=#3c3cff>\"Boolean\"</color>: <color=#3111aa>true</color>,",
		"<color=#3c3cff>}</color>",
		"",
		"最外側は対称的な<color=#3c3cff>{ }</color>のペアです。",
		"<color=#3c3cff>\"key\"</color>, <color=#3c3cff>\"array\"</color>, <color=#3c3cff>\"Child\"</color>, <color=#3c3cff>\"Child2\"</color>, <color=#3c3cff>\"string\"</color> がキーです。",
		"",
		"<color=#33aa55>1</color>      は数値、",
		"<color=#33aa55>[ ]</color>     は配列、",
		"<color=#3111aa>true</color>  はブーリアン値、",
		"<color=#ee3300>\"[]{}\"</color> は文字列、",
		"<color=#e06600>{}</color>      はオブジェクトです。",
		"",
		"容易にわかるように、最外側の対称的な<color=#3c3cff>{ }</color>のペアはオブジェクトを意味します。上記の例では、対応する中括弧が同じ色でマークされています。",
		"オブジェクトや配列の内部では、前述の形式に従って文字列、数値、ブーリアン値、配列、オブジェクト、またはnullをネストすることができます。",
		"",
		"<color=#33aa55>[ ]</color>、<color=#3c3cff>{ }</color>、<color=#ee3300>\" \"</color> がペアで出現するため、<b>balancing groups</b>（バランシンググループ）を使用してJSONデータの単純な合法性チェックを行うことができます。",
		"",
		"問題を簡略化するため、以下の取り決めを設けます：",
		"1.  単純なペアの数のチェックのみ行い、複雑な形式チェックは行わない。",
		"    *例: { \"key\": [, \"key2\": ] } は形式エラーだが、キーワードがペアで出現するためバランシンググループチェックは通過する*",
		"2.  <color=#ee3300>\"[]{}\"</color> のような文字列内の記号は、バランシンググループのマッチング数にカウントせず、無視する。",
		"3.  <b>答え指向型プログラミング<b>を優先し、テストケースを通過すれば十分。100%すべてのJSONデータをチェックする正規表現を作成する必要はない。",
		"",
		"<color=#666666>(この問題は難しいため、解けなければスキップ可...)</color>",
		"",
		"",
		"右側のすべてのテストケースを通過する正規表現を構築してください。"
	],
	"m_SystemLanguage":"Japanese"
}