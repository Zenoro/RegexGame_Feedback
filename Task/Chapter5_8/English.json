{
	"m_DescList":[
		"As previously mentioned, <color=#05C3BA>(?</color><color=#AB2800><= subexpression </color><color=#05C3BA>)</color> is a zero-width positive lookbehind assertion that will <b>match and consume</b> the matched content.  ",
		"",
		"For example, using <color=#05C3BA>(?</color><color=#AB2800><= 2 </color><color=#05C3BA>)</color><color=#AB2800>3</color> to match the following samples:  ",
		"<color=#3c3cff>1234</color> yields: <color=#666666>12</color><color=#3c3cff>3</color><color=#666666>4</color>  ",
		"<color=#3c3cff>34</color> does not match  ",
		"",
		"When first learning regular expressions, one might <color=#ee3300>mistakenly</color> interpret <color=#05C3BA>(?</color><color=#AB2800><= 2 </color><color=#05C3BA>)</color><color=#AB2800>3</color> as:  ",
		"1. The regex first matches <color=#AB2800>23</color>  ",
		"2. Then removes <color=#AB2800>2</color> from the final result  ",
		"",
		"In the following examples, two regex patterns match the space-prefixed string \" <color=#3c3cff>2</color>\":  ",
		"<color=#05C3BA>(?</color><color=#AB2800><= </color><color=#FF68DD>\\A </color><color=#05C3BA>| </color><color=#FF68DD>\\A</color><color=#3173FF>\\s</color><color=#FF68DD>* </color><color=#05C3BA>)</color><color=#AB2800>2</color> yields: \"<color=#AB2800> 2</color>\"  ",
		"<color=#FF68DD>\\A</color><color=#05C3BA>(?</color><color=#AB2800><= </color><color=#3173FF>\\s</color><color=#FF68DD>* </color><color=#05C3BA>)</color><color=#AB2800>2</color> fails to match  ",
		"",
		"This test case proves that the zero-width positive lookbehind assertion doesnâ€™t simply match first and then remove partial content.  ",
		"",
		"Regular expressions actually operate <b>step-by-step</b>. Taking <color=#05C3BA>(?</color><color=#AB2800><= </color><color=#FF68DD>\\A </color><color=#05C3BA>| </color><color=#FF68DD>\\A</color><color=#3173FF>\\s</color><color=#FF68DD>* </color><color=#05C3BA>)</color><color=#AB2800>2</color> as an example:  ",
		"1. Locate <color=#AB2800>2</color>  ",
		"2. At the regex engine's current position, perform a <b>lookbehind</b> from right to left for <color=#05C3BA>(?</color><color=#AB2800><= </color><color=#FF68DD>\\A </color><color=#05C3BA>| </color><color=#FF68DD>\\A</color><color=#3173FF>\\s</color><color=#FF68DD>* </color><color=#05C3BA>)</color>. The characters before <color=#3c3cff>2</color> are the string start plus a space, matching <color=#FF68DD>\\A</color><color=#3173FF>\\s</color><color=#FF68DD>*</color>",
		"",
		"Analyzing <color=#FF68DD>\\A</color><color=#05C3BA>(?</color><color=#AB2800><= </color><color=#3173FF>\\s</color><color=#FF68DD>* </color><color=#05C3BA>)</color><color=#AB2800>2</color>:  ",
		"1. Locate <color=#FF68DD>\\A</color>  ",
		"2. At this position, perform a <b>lookbehind</b> for <color=#05C3BA>(?</color><color=#AB2800><= </color><color=#3173FF>\\s</color><color=#FF68DD>* </color><color=#05C3BA>)</color>. The engine is at the string start with no preceding content, hence matching fails.  ",
		"",
		"Due to its <b>lookbehind</b> nature, <color=#05C3BA>(?</color><color=#AB2800><= subexpression </color><color=#05C3BA>)</color> is called a zero-width positive <b>lookbehind</b> assertion.  ",
		"",
		"In INI files, all parameters are grouped by sections.  ",
		"Section declarations occupy separate lines, with section names enclosed in square brackets <color=#3c3cff>[]</color>.  ",
		"All parameters following a section declaration belong to that section.  ",
		"",
		"<img src=Texture/Task/IniSection width=337 height=167>  ",
		"",
		"Section declarations appear as <color=#3c3cff>[Section2]</color> in the image above.  ",
		"",
		"To match section content, the following conventions apply:  ",
		"1. Each test case is an independent line  ",
		"2. If the line is a section declaration, match the complete declaration from \"[\" to \"]\", excluding content before \"[\"  ",
		"3. Whitespace may exist before the declaration, but the matched result must <b>exclude</b> whitespace  ",
		"4. If non-whitespace characters precede \"[\", this line should not be matched  ",
		"",
		"",
		"Construct a regular expression that passes all test cases on the right.  "
	],
	"m_SystemLanguage":"English"
}